using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class StateManager : MonoBehaviour
{
    #region Properties
    [Header("Info")]
    public GameObject modelPrefab;
    public bool inGame;
    public bool isPlayer;

    [Header("Stats")]
    public float groundDistance = 0.6f;
    public float groundOffset = 0;
    public float distanceToCheckForward = 1.3f;
    public float runSpeed = 5;
    public float walkSpeed = 2;
    public float jumpForce = 4;
    public float ragdollHeight = 5f;
    public float fallToKneesHeight = 15f;
    public float playerRotationSpeed = 2;
    public float airTimeThreshold = 0.8f;
    [Header("Inputs")]
    public float horizontal;
    public float vertical;
    public bool jumpInput;

    [Header("States")]
    public bool obstacleForward;
    public bool groundForward;
    public float groundAngle;

    /*Character States*/
    [Header("State Requests")]
    public float fallDistance;
    public CharStates curState;
    public bool onGround;
    public bool run;
    public bool walk;
    public bool onLocomotion;
    public bool inAngle_MoveDir;
    public bool jumping;
    public bool canJump;
    #endregion

    #region References
    GameObject activeModel;
    [HideInInspector]
    public Animator anim;
    [HideInInspector]
    public Rigidbody rBody;
    #endregion

    #region Variables
    [HideInInspector]
    public Vector3 moveDirection;
    public float airTime;
    [HideInInspector]
    public bool prevGround;
    #endregion    
    LayerMask ignoreLayers;

    public enum CharStates
    {
        Idle, Moving, InAir, Hold
    }

    #region Initialization
    public void Init()
    {
        inGame = true;
        CreateModel();
        SetupAnimator();
        AddControllerReferences();
        canJump = true;
        gameObject.layer = 8;
        ignoreLayers = ~(1 << 3 | 1 << 8);
    }

    private void AddControllerReferences()
    {
        gameObject.AddComponent<Rigidbody>();
        rBody = GetComponent<Rigidbody>();
        rBody.angularDrag = 999;
        rBody.drag = 4;
        rBody.constraints = RigidbodyConstraints.FreezeRotationZ | RigidbodyConstraints.FreezeRotationX;
    }

    private void SetupAnimator()
    {
        anim = GetComponent<Animator>();
        Animator childAnim = activeModel.GetComponent<Animator>();
        anim.avatar = childAnim.avatar;
        Destroy(childAnim);
    }

    private void CreateModel()
    {
        activeModel = Instantiate(modelPrefab) as GameObject;
        activeModel.transform.parent = this.transform;
        activeModel.transform.localPosition = Vector3.zero;
        activeModel.transform.localEulerAngles = Vector3.zero;
        activeModel.transform.localScale = Vector3.one;
    }


    #endregion

    public void FixedTick()
    {
        obstacleForward = false;
        groundForward = false;
        onGround = OnGround();

        if (onGround)
        {
            Vector3 origin = transform.position;
            origin += Vector3.up * 0.75f;
            IsClear(origin, transform.forward, distanceToCheckForward, ref obstacleForward);
            if (!obstacleForward)
            {
                origin += transform.forward * 0.6f;
                IsClear(origin, -Vector3.up, groundDistance * 3, ref groundForward);
            }
            else
            {
                if (Vector3.Angle(transform.forward, moveDirection) > 30)
                    obstacleForward = false;
            }
        }
        UpdateState();
        MonitorAirTime();
    }

    public void LegFront()
    {
        Vector3 ll = anim.GetBoneTransform(HumanBodyBones.LeftFoot).position;
        Vector3 rl = anim.GetBoneTransform(HumanBodyBones.RightFoot).position;
        Vector3 rel_ll = transform.InverseTransformPoint(ll);
        Vector3 rel_rr = transform.InverseTransformPoint(rl);

        bool left = rel_ll.z > rel_rr.z;
        anim.SetBool(Statics.mirrorJump, left);

    }
    public void RegularTick()
    {
        onGround = OnGround();
        fallDistance = Math.Abs(rBody.velocity.y);
    }
    private void MonitorAirTime()
    {
        if (!jumping)
            anim.SetBool(Statics.onAir, !onGround);

        if (onGround)
        {
            if (prevGround != onGround)
            {
                
                if (fallDistance > ragdollHeight && fallDistance < fallToKneesHeight)
                {
                    anim.SetInteger(Statics.jumpType, 1);
                }
                else if (fallDistance > fallToKneesHeight)
                {
                    anim.SetInteger(Statics.jumpType, 2);
                }
                else
                {
                    anim.SetInteger(Statics.jumpType, 0);
                }
            }
            airTime = 0;
        }
        else
            airTime += Time.deltaTime;


        prevGround = onGround;
    }

    private void UpdateState()
    {
        if (curState == CharStates.Hold)
            return;

        if (horizontal != 0 || vertical != 0)
            curState = CharStates.Moving;
        else
            curState = CharStates.Idle;

        if (!onGround)
            curState = CharStates.InAir;
    }

    private void IsClear(Vector3 origin, Vector3 direction, float distance, ref bool isHit)
    {
        RaycastHit hit;
        Debug.DrawRay(origin, direction * distance, Color.green);

        if (Physics.Raycast(origin, direction, out hit, distance, ignoreLayers))
            isHit = true;
        else
            isHit = false;

        if (obstacleForward)
        {
            Vector3 incomingVec = hit.point - origin;
            Vector3 reflectVect = Vector3.Reflect(incomingVec, hit.normal);
            float angle = Vector3.Angle(incomingVec, reflectVect);

            if (angle < 70)
                obstacleForward = false;
        }
        if (groundForward)
        {
            if (curState == CharStates.Moving)
            {
                Vector3 p1 = transform.position;
                Vector3 p2 = hit.point;
                float diffY = p1.y - p2.y;
                groundAngle = diffY;
            }

            float targetIncline = 0;

            if (Mathf.Abs(groundAngle) > 0.3f)
            {
                if (groundAngle < 0)
                    targetIncline = 1;
                else
                    targetIncline = -1;
            }

            if (groundAngle == 0)
                targetIncline = 0;

            anim.SetFloat(Statics.incline, targetIncline, 0.3f, Time.deltaTime);
        }
    }

    public bool OnGround()
    {
        bool r = false;
        if (curState == CharStates.Hold)
            return false;
        Vector3 origin = transform.position + (Vector3.up * 0.55f);

        RaycastHit hit = new RaycastHit();
        bool isHit = false;
        FindGround(origin, ref hit, ref isHit);

        if (!isHit)
        {
            for (int i = 0; i < 4; i++)
            {
                Vector3 newOrigin = origin;

                switch (i)
                {
                    case 0://forward
                        newOrigin += Vector3.forward / 3;
                        break;
                    case 1://backwards
                        newOrigin -= Vector3.forward / 3;
                        break;
                    case 2://left
                        newOrigin -= Vector3.right / 3;
                        break;
                    case 3://right
                        newOrigin += Vector3.right / 3;
                        break;
                    default:
                        break;
                }

                FindGround(newOrigin, ref hit, ref isHit);
                if (isHit == true)
                    break;
            }
        }

        r = isHit;
        if (r != false)
        {
            Vector3 targetPosition = transform.position;
            targetPosition.y = hit.point.y + groundOffset;
            transform.position = targetPosition;
        }
        return r;
    }

    private void FindGround(Vector3 origin, ref RaycastHit hit, ref bool isHit)
    {
        Debug.DrawRay(origin, -Vector3.up * 0.5f, Color.red);
        if (Physics.Raycast(origin, -Vector3.up, out hit, groundDistance, ignoreLayers))
        {
            isHit = true;
            //if (hit.transform.tag =="")
            //{

            //}
        }
    }
}
